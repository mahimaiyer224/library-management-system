package com.example.library;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;

public class StudentTest {

    private student testStudent;
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final InputStream originalIn = System.in;

    @BeforeEach
    public void setUp() {
        // Redirect standard output to capture printed text
        System.setOut(new PrintStream(outContent));
        // Reset input stream for mocking user input
        System.setIn(new ByteArrayInputStream("John Doe\nS12345\n".getBytes()));
        testStudent = new student(); // Call the default constructor for interactive input
    }

    @Test
    public void testStudentConstructor() {
        // Verify the student object is created correctly
        assertEquals("John Doe", testStudent.studentName);
        assertEquals("S12345", testStudent.regNum);

        // Check the output generated by the println calls
        String output = outContent.toString();
        assertTrue(output.contains("Enter Student Name:"));
        assertTrue(output.contains("Enter Registration Number:"));
    }

    @Test
    public void testBorrowBook() {
        // Create a new book and borrow it
        book newBook = new book(1, "Test Book", "Test Author", 3);
        testStudent.borrowedBooks[0] = newBook;
        testStudent.booksCount = 1; // 1 book borrowed

        assertEquals(1, testStudent.booksCount);
        assertEquals(newBook, testStudent.borrowedBooks[0]);

        // Try borrowing more books than allowed (boundary test)
        book extraBook = new book(2, "Another Book", "Another Author", 2);
        testStudent.borrowedBooks[1] = extraBook;
        testStudent.booksCount = 2; // 2 books borrowed

        book thirdBook = new book(3, "Third Book", "Third Author", 1);
        testStudent.borrowedBooks[2] = thirdBook;
        testStudent.booksCount = 3; // 3 books borrowed

        // Attempt to borrow a 4th book should be prevented
        book fourthBook = new book(4, "Fourth Book", "Fourth Author", 1);
        // Checking if student can't borrow more than 3 books
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {
            testStudent.borrowedBooks[3] = fourthBook; // Should throw exception
        });

        // Check that the book count hasn't increased beyond 3
        assertEquals(3, testStudent.booksCount); // Should still be 3
    }

    @Test
    public void testBoundaryConditionForBooks() {
        // Test that the book count can't go beyond 3
        testStudent.booksCount = 3;
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {
            testStudent.borrowedBooks[3] = new book(4, "Overflow Book", "Overflow Author", 5); // Should throw exception
        });
    }

    @Test
    public void testPrintStudentInfo() {
        // Verify the output when the constructor runs
        String output = outContent.toString();
        assertTrue(output.contains("Enter Student Name:"));
        assertTrue(output.contains("Enter Registration Number:"));
    }

    @AfterEach
    public void restoreStreams() {
        // Restore the original System.out and System.in
        System.setOut(originalOut);
        System.setIn(originalIn);
    }
}
